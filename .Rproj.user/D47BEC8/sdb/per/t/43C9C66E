{
    "contents" : "library(shiny)\nlibrary(ggplot2)\n\nui <- fluidPage(\n  titlePanel(\"Gene drive simulator\"),\n  helpText(\"Simulate how many generations a gene drive would take to be spread out in a population. This model assumes: 1) Male and female contributions are equal, 2) species is semelparous, and 3) mortality or survival is equal between wild and gene-drive individuals.\"),\n  helpText(\" Enter a population size and a number of gene-drive individuals to be released at F0.\"),\n  #Input\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(inputId = \"popsize\",label = \"Wild population size (individual)\", 100),\n      numericInput(inputId = \"release\",label = \"F0 gene drive (individual)\", 20),\n      selectInput(inputId = \"drawline\", label = \"Draw regression\", choices = c(\"None\"=\"none\",\"Logistic regression\"=\"logistic\",\"Linear regression\"=\"linear\")),\n      conditionalPanel(condition = \"input.drawline == 'logistic'\",\n                       checkboxInput(inputId = \"se1\", label = \"Include 95% confidence interval\")),\n      conditionalPanel(condition = \"input.drawline == 'linear'\",\n                       checkboxInput(inputId = \"se2\", label = \"Include 95% confidence interval\")),\n      actionButton(\"go\", label=\"Simulate\"),\n      helpText(\"*Computing time will increase with the increasing ratio of population size to F0 gene drive.\")\n  \n    ),\n    mainPanel(\n      #Output\n      plotOutput(outputId = \"plot1\"),\n      tableOutput('tbl')\n    )\n  )\n)\n  \nserver <- function(input, output){\n  data <- eventReactive(input$go, {\n    wild <- round(input$popsize / input$release)\n    drive <- 1\n    if(wild > 90){\n        showModal(modalDialog(\n          title=\"Important message\",\n          \"The ratio of wild population to gene drive is large. Simulation might take a few minutes or longer. Please be patient!\", easyClose=T\n        ))\n    }\n\n    #define a function to get the next gene drive generation\n    driveNextGen <- function(wild=NULL, drive=NULL){\n      F0 <- c(rep(\"W\", wild*2), rep(\"G\", drive*2)) #F0 gametes\n      F1 <- NULL\n      mixindex <- sample(length(F0))#create sampling index\n      for (i in seq(1, length(mixindex), 2)){\n        pair <- F0[mixindex[c(i, i+1)]] #Get every two individuals as a pair\n        if(\"W\" %in% pair & \"G\" %in% pair){\n          pair <- c(\"G\",\"G\")\n          F1 <- c(F1, pair)\n        }else{\n          F1 <- c(F1, pair)\n        }\n      }\n      return(F1)\n    }\n    #Estimate the initial gene drive frequency and create a data frame to save results\n    driveFreq <- drive / (drive + wild)\n    df <- data.frame(0, driveFreq)\n    gen <- 0\n    #Simulate gene drive freq across generations until drive freq = 1\n    while(!is.na(wild)){ #keep looping until wild becomes NA\n      gen <- gen + 1\n      showNotification(ui=paste0(\"Simulating F\",gen,\" generation...\"), id = paste0(\"F\",gen), duration = NULL)\n      res <- driveNextGen(wild=wild, drive=drive)\n      restb <- table(res)\n      wild <- restb[2]\n      drive <- restb[1]\n      driveFreq <- restb[1]/sum(restb) #restb[1] is restb[names(restb)==\"G]\n      data <- c(gen, driveFreq)\n      df <- rbind(df, data)\n      removeNotification(id = paste0(\"F\",gen))\n    }\n    #Create plot\n    gplot <- ggplot(data=df, aes(x=X0, y=driveFreq))+\n      geom_point()+\n      xlab(\"Generation\")+ylab(\"Gene drive frequency\")+\n      ylim(0,1)+\n      scale_x_continuous(breaks=seq(0, nrow(df), 1))+\n      theme_bw()+\n      theme(axis.title = element_text(size=14),\n            axis.text = element_text(size=12))+\n      if(input$drawline == \"logistic\"){\n        if(input$se1){\n          stat_smooth(method=\"glm\", method.args=list(family=\"binomial\"), se=T)\n        }else {\n          stat_smooth(method=\"glm\", method.args=list(family=\"binomial\"), se=F)\n        }\n      } else if(input$drawline == \"linear\"){\n        if(input$se2){\n          stat_smooth(method = \"lm\", se=T)\n        }else {\n          stat_smooth(method = \"lm\", se=F)\n        }\n      }\n    #change table column names\n    names(df) <- c(\"Fx\", \"frequency\")\n    df$Fx <- as.integer(df$Fx)\n    list(df = df, gplot = gplot)\n  })\n  output$plot1 <- renderPlot({\n    data()$gplot\n  })\n  output$tbl <- renderTable({\n    data()$df\n  })\n}\n\nshinyApp(ui = ui, server = server)\n  \n\n  \n  ",
    "created" : 1486901908487.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2081474789",
    "id" : "43C9C66E",
    "lastKnownWriteTime" : 1487683011,
    "path" : "~/Dropbox/Github/GeneDriveModel/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}