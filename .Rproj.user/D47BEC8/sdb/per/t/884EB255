{
    "contents" : "popsize <- 20\nrelease <- 1\nNoGen <- 0\nF0 <- c(rep(\"W\", popsize*2), rep(\"G\",release*2)) #F0 gametes\nF1 <- NULL\nmixindex <- sample(length(F0))#create sampling index\n\ndriveNextGen <- function(wild=10, drive=1){\n  F0 <- c(rep(\"W\", wild*2), rep(\"G\",drive*2)) #F0 gametes\n  F1 <- NULL\n  mixindex <- sample(length(F0))#create sampling index\n  for (i in seq(1, length(mixindex), 2)){ #for loop through mixindex\n    pair <- F0[mixindex[c(i, i+1)]] #Get every two as a pair\n    if (\"W\" %in% pair & \"G\" %in% pair){\n      pair <- c(\"G\",\"G\")\n      F1 <- c(F1, pair)\n    } else{\n      F1 <- c(F1, pair)\n    }\n  }\n  return(F1)\n} \n\ndriveNextGen2 <- function(wild=NULL, drive=NULL){\n  if(wild >= drive){\n    wild <- round(wild/drive)\n    drive <- 1\n  }else if(wild < drive){\n    drive <- round(drive/wild)\n    wild <- 1\n  }\n  F0 <- c(rep(\"W\", wild*2), rep(\"G\",drive*2)) #F0 gametes\n  F1 <- NULL\n  mixindex <- sample(length(F0))#create sampling index\n  for (i in seq(1, length(mixindex), 2)){ #for loop through mixindex\n    pair <- F0[mixindex[c(i, i+1)]] #Get every two as a pair\n    if (\"W\" %in% pair & \"G\" %in% pair){\n      pair <- c(\"G\",\"G\")\n      F1 <- c(F1, pair)\n    } else{\n      F1 <- c(F1, pair)\n    }\n  }\n  return(F1)\n}\n\n#Get gene drive frequency (individuals that carry gene drive in the population)\nNoGenSp <- NULL\nNoGen <- 0\n## get gene drive freq. across 10 generations\npopsize <- 20\nrelease <- 1\ndriveFreq <- release / (release + popsize)\ndf <- data.frame(0, driveFreq)\ngen <- 0\n\nwhile(!is.na(popsize)){ #keep running the following script until popsize is NA\n  gen <- gen + 1\n  res <- driveNextGen(wild=popsize, drive=release)\n  restb <- table(res)\n  popsize <- restb[2]\n  release <- restb[1]\n  driveFreq <- restb[1]/sum(restb) #restb[1] is restb[names(restb)==\"G]\n  data <- c(gen, driveFreq)\n  df <- rbind(df, data)\n}\n\nplot(df$X0, df$driveFreq) #X0 is generation; driveFreq is Frequency of gene drive\n\nlibrary(ggplot2)\nggplot(data=df, aes(x=X0, y=driveFreq))+\n  geom_point()+\n  stat_smooth(method=\"glm\", method.args=list(family=\"binomial\"), se=F)+\n  xlab(\"Generation\")+\n  ylab(\"Gene drive frequency\")+\n  theme_bw()+\n  theme(axis.title = element_text(size=14),\n        axis.text = element_text(size=12))\n\n\n#### Test script #####\nres <- driveNextGen2(wild=374, drive=51338)\n\n\n\n\nfor (gen in seq(1,10)){\n  if(is.na(popsize)){\n    break\n  }\n  else if(popsize > 0){\n    res <- driveNextGen(wild=popsize, drive=release)\n    restb <- table(res)\n    popsize <- restb[2]\n    release <- restb[1]\n    driveFreq <- restb[1]/sum(restb) #restb[1] is restb[names(restb)==\"G]\n    data <- c(gen, driveFreq)\n    df <- rbind(df, data)\n  }\n}\n\nplot(df$X0, df$driveFreq)\n\n\n",
    "created" : 1486953791164.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2559507280",
    "id" : "884EB255",
    "lastKnownWriteTime" : 1487399227,
    "path" : "~/Dropbox/Github/GeneDriveModel/alleleFreqSimulation.R",
    "project_path" : "alleleFreqSimulation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}